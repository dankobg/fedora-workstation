---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: type glow
  changed_when: false
  register: glow_installed
  failed_when: "not ('glow: not found' in glow_installed.stderr or 'glow is' in glow_installed.stdout)"

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: glow --version
  changed_when: false
  register: glow_installed_version_data
  failed_when: "'glow' not in glow_installed_version_data.stdout"
  when: glow_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    glow_installed_version: "{{ 'v' + glow_installed_version_data.stdout.split()[2] if glow_installed.rc == 0 else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/charmbracelet/glow/releases/latest
    return_content: true
  register: glow_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    glow_release_version: "{{ glow_latest_release_data.json.tag_name if glow_version == 'latest' else glow_version }}"

- name: Download and install
  when: glow_installed_version != glow_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: arm64
      ansible.builtin.set_fact:
        glow_release_artifact: "glow_{{ glow_release_version[1:] }}_{{ ansible_facts.system }}_{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: glow_
      register: glow_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/charmbracelet/glow/releases/download/{{ glow_release_version }}/{{ glow_release_artifact }}.tar.gz"
        dest: "{{ glow_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ glow_tempdir.path }}/{{ glow_release_artifact }}/glow"
        dest: "{{ glow_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ glow_tempdir.path }}"
        state: absent
