---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ kubectl_binary_name }}"
  register: kubectl_installed
  changed_when: false
  failed_when: kubectl_installed.rc != 0 and kubectl_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ kubectl_binary_name }} version"
  register: kubectl_installed_version_data
  changed_when: false
  failed_when: >
    (kubectl_installed_version_data.rc != 0 and 'was refused' not in kubectl_installed_version_data.stderr) or
    (kubectl_installed_version_data.rc == 0 and 'Client Version' not in kubectl_installed_version_data.stdout)
  when: kubectl_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    kubectl_installed_version: "{{ kubectl_installed_version_data.stdout_lines[0].split()[2] if kubectl_installed.rc == 0 else '' }}"

- name: Get the stable release data
  ansible.builtin.uri:
    url: "{{ kubectl_latest_version_url }}"
    return_content: true
  register: kubectl_stable_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    kubectl_release_version: "{{ kubectl_stable_release_data.content if kubectl_version == 'latest' else kubectl_version }}"

- name: Download and install
  when: kubectl_force_download or kubectl_installed_version != kubectl_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: kubectl_
      register: kubectl_tempdir

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ kubectl_artifact_download_url }}"
        dest: "{{ kubectl_tempdir.path }}"
        checksum: "{{ kubectl_checksum }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x

    - name: Copy the binary
      ansible.builtin.copy:
        src: "{{ kubectl_tempdir.path }}/kubectl"
        dest: "{{ kubectl_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ kubectl_tempdir.path }}"
        state: absent
