---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ eza_binary_name }}"
  register: eza_installed
  changed_when: false
  failed_when: eza_installed.rc != 0 and eza_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ eza_binary_name }} --version"
  register: eza_installed_version_data
  changed_when: false
  failed_when: "eza_installed_version_data.rc != 0 or (eza_installed_version_data.rc == 0 and 'eza' not in eza_installed_version_data.stdout)"
  when: not eza_installed.failed

- name: Set installed version
  ansible.builtin.set_fact:
    eza_installed_version: "{{ eza_installed_version_data.stdout_lines[1].split()[0] if not eza_installed_version_data.failed else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/eza-community/eza/releases/latest
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: eza_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    eza_release_version: "{{ eza_latest_release_data.json.tag_name if eza_version == 'latest' else eza_version }}"

- name: Download and install
  when: eza_installed_version != eza_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: aarch64
      ansible.builtin.set_fact:
        eza_release_artifact: "eza_{{ arch }}-unknown-{{ ansible_facts.system }}-gnu"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: eza_
      register: eza_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/eza-community/eza/releases/download/{{ eza_release_version }}/{{ eza_release_artifact }}.tar.gz"
        dest: "{{ eza_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ eza_tempdir.path }}/eza"
        dest: "{{ eza_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ eza_tempdir.path }}"
        state: absent
