---
- name: Ensure not installed via dnf
  ansible.builtin.dnf:
    name:
      - golang
      - golang-src
    state: absent
    autoremove: true

- name: Ensure golang directory does not exist
  ansible.builtin.file:
    path: /usr/lib/golang
    state: absent

- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ go_binary_name }}"
  register: go_installed
  changed_when: false
  failed_when: go_installed.rc != 0 and go_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ go_binary_name }} version"
  register: go_installed_version_data
  changed_when: false
  failed_when: "go_installed_version_data.rc != 0 or (go_installed_version_data.rc == 0 and 'go version' not in go_installed_version_data.stdout)"
  when: go_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    go_installed_version: "{{ go_installed_version_data.stdout.split()[2] if go_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ go_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: go_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    go_release_version: "{{ go_latest_release_data.json[0].version if go_version == 'latest' else go_version }}"

- name: Download and install
  when: go_force_download or go_installed_version != go_release_version
  block:
    - name: Ensure clean extract path
      ansible.builtin.file:
        path: "{{ go_dir }}"
        state: absent

    - name: Get info for the given version
      ansible.builtin.set_fact:
        releases_list: "{{ go_latest_release_data.json | selectattr('version', 'eq', go_release_version) | map(attribute='files') | first }}"

    - name: Set checksum
      ansible.builtin.set_fact:
        go_checksum: >-
          {{ go_checksum_algorithm }}:{{ releases_list
          | selectattr('kind', 'eq', 'archive')
          | selectattr('filename', 'eq', go_artifact_name)
          | map(attribute='sha256') | first }}

    - name: Ensure go directory exists
      ansible.builtin.file:
        path: "{{ go_dir }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ go_artifact_download_url }}"
        dest: "{{ go_dir }}"
        checksum: "{{ go_checksum }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
      register: downloaded_artifact

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ go_artifact_download_url }}"
        dest: "/usr/local"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true

    - name: Give executable permissions to binary
      ansible.builtin.file:
        path: "{{ go_dir }}/bin"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        recurse: true

- name: Configure go
  block:
    - name: Ensure gopath directory exists
      ansible.builtin.file:
        path: "{{ go_gopath_dir }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"

    - name: Install go tools
      become: true
      become_user: "{{ username }}"
      ansible.builtin.command:
        cmd: "go install {{ item }}"
      loop: "{{ go_tools }}"
      changed_when: true
