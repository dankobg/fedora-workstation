---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ rclone_binary_name }}"
  changed_when: false
  register: rclone_installed
  failed_when: rclone_installed.rc != 0 and rclone_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ rclone_binary_name }} --version"
  register: rclone_installed_version_data
  changed_when: false
  failed_when: "rclone_installed_version_data.rc != 0 or (rclone_installed_version_data.rc == 0 and 'rclone' not in rclone_installed_version_data.stdout)"
  when: not rclone_installed.failed

- name: Set installed version
  ansible.builtin.set_fact:
    rclone_installed_version: "{{ rclone_installed_version_data.stdout_lines[0].split()[1] if not rclone_installed_version_data.failed else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/rclone/rclone/releases/latest
    return_content: true
  register: rclone_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    rclone_release_version: "{{ rclone_latest_release_data.json.tag_name if rclone_version == 'latest' else rclone_version }}"

- name: Download and install
  when: rclone_installed_version != rclone_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: amd64
          arm: arm64
      ansible.builtin.set_fact:
        rclone_release_artifact: "rclone-{{ rclone_release_version }}-{{ ansible_facts.system | lower }}-{{ arch }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: rclone_
      register: rclone_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/rclone/rclone/releases/download/{{ rclone_release_version }}/{{ rclone_release_artifact }}.zip"
        dest: "{{ rclone_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ rclone_tempdir.path }}/{{ rclone_release_artifact }}/rclone"
        dest: "{{ rclone_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ rclone_tempdir.path }}"
        state: absent
