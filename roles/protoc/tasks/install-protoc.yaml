---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ protoc_binary_name }}"
  changed_when: false
  register: protoc_installed
  failed_when: protoc_installed.rc != 0 and protoc_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ protoc_binary_name }} --version"
  register: protoc_installed_version_data
  changed_when: false
  failed_when: "protoc_installed_version_data.rc != 0 or (protoc_installed_version_data.rc == 0 and 'libprotoc' not in protoc_installed_version_data.stdout)"
  when: not protoc_installed.failed

- name: Set installed version
  ansible.builtin.set_fact:
    protoc_installed_version: "{{ 'v' + protoc_installed_version_data.stdout.split()[1] if not protoc_installed_version_data.failed else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/protocolbuffers/protobuf/releases/latest
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: protoc_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    protoc_release_version: "{{ protoc_latest_release_data.json.tag_name if protoc_version == 'latest' else protoc_version }}"

- name: Download and install
  when: protoc_installed_version != protoc_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: aarch64
      ansible.builtin.set_fact:
        protoc_release_artifact: "protoc-{{ protoc_release_version[1:] }}-{{ ansible_facts.system | lower }}-{{ arch }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: protoc_
      register: protoc_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/protocolbuffers/protobuf/releases/download/{{ protoc_release_version }}/{{ protoc_release_artifact }}.zip"
        dest: "{{ protoc_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ protoc_tempdir.path }}/bin/protoc"
        dest: "{{ protoc_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ protoc_tempdir.path }}"
        state: absent
