---
- name: Check if installed
  ansible.builtin.command:
    cmd: type zed
  changed_when: false
  register: zed_installed
  failed_when: "not ('zed: not found' in zed_installed.stderr or 'zed is' in zed_installed.stdout)"

- name: Get installed version data
  ansible.builtin.command:
    cmd: zed --version
  changed_when: false
  register: zed_installed_version_data
  failed_when: "'zed' not in zed_installed_version_data.stdout"
  when: zed_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    zed_installed_version: "{{ zed_installed_version_data.stdout.split()[1] if zed_installed.rc == 0 else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/zed-industries/zed/releases/latest
    return_content: true
  register: zed_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    zed_release_version: "{{ zed_latest_release_data.json.tag_name if zed_version == 'latest' else zed_version }}"

- name: Download and install
  when: zed_installed_version != zed_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: aarch64
      ansible.builtin.set_fact:
        zed_release_artifact: "zed-{{ ansible_facts.system | lower }}-{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: zed_
      register: zed_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/zed-industries/zed/releases/download/{{ zed_release_version }}/{{ zed_release_artifact }}.tar.gz"
        dest: "{{ zed_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ zed_tempdir.path }}/zed.app/bin/zed"
        dest: "{{ zed_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Copy .so files if they don't exist
      ansible.builtin.copy:
        src: "{{ zed_tempdir.path }}/zed.app/lib/"
        dest: "/usr/lib64"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true
        force: false

    - name: Copy libexec
      ansible.builtin.copy:
        src: "{{ zed_tempdir.path }}/zed.app/libexec/zed-editor"
        dest: /usr/local/libexec
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Copy desktop file
      ansible.builtin.copy:
        src: "{{ zed_tempdir.path }}/zed.app/share/applications/zed.desktop"
        dest: /usr/local/share/applications/zed.desktop
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
        remote_src: true

    - name: Ensure icons directories exist
      ansible.builtin.file:
        path: "/usr/local/share/icons/hicolor/{{ item }}/apps"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
      loop:
        - "512x512"
        - "1024x1024"

    - name: Copy icons
      ansible.builtin.copy:
        src: "{{ zed_tempdir.path }}/zed.app/share/icons/hicolor/{{ item }}/apps/zed.png"
        dest: /usr/local/share/icons/hicolor/{{ item }}/apps/zed.png
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
        remote_src: true
      loop:
        - "512x512"
        - "1024x1024"

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ zed_tempdir.path }}"
        state: absent
