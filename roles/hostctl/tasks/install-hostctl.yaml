---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ hostctl_binary_name }}"
  register: hostctl_installed
  changed_when: false
  failed_when: hostctl_installed.rc != 0 and hostctl_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ hostctl_binary_name }} --version"
  register: hostctl_installed_version_data
  changed_when: false
  failed_when: "hostctl_installed_version_data.rc != 0 or (hostctl_installed_version_data.rc == 0 and 'hostctl' not in hostctl_installed_version_data.stdout)"
  when: hostctl_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    hostctl_installed_version: "{{ 'v' + hostctl_installed_version_data.stdout.split()[2] if hostctl_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ hostctl_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: hostctl_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    hostctl_release_version: "{{ hostctl_latest_release_data.json.tag_name if hostctl_version == 'latest' else hostctl_version }}"

- name: Download and install
  when: hostctl_force_download or hostctl_installed_version != hostctl_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: hostctl_
      register: hostctl_tempdir

    - name: Download checksums
      ansible.builtin.get_url:
        url: "{{ hostctl_checksum_url }}"
        dest: "{{ hostctl_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
      register: downloaded_checksums

    - name: Get checksum text content
      ansible.builtin.slurp:
        src: "{{ downloaded_checksums.dest }}"
      register: checksums_data

    - name: Get sha256 text content
      ansible.builtin.set_fact:
        sha256_text: "{{ checksums_data.content | b64decode | trim }}"

    - name: Get search word rhs
      ansible.builtin.set_fact:
        search_word_rhs: "{{ hostctl_artifact_name }}"

    - name: Extract checksum
      ansible.builtin.set_fact:
        hostctl_checksum: "{{ hostctl_checksum_algorithm }}:{{ sha256_text | regex_search('([a-f0-9]{64})\\s+.*' ~ search_word_rhs) | split | first }}"

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ hostctl_artifact_download_url }}"
        dest: "{{ hostctl_tempdir.path }}"
        checksum: "{{ hostctl_checksum }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
      register: downloaded_artifact

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ downloaded_artifact.dest }}"
        dest: "{{ hostctl_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ hostctl_tempdir.path }}/hostctl"
        dest: "{{ hostctl_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ hostctl_tempdir.path }}"
        state: absent
