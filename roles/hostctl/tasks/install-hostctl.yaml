---
- name: Check if installed
  ansible.builtin.command:
    cmd: type hostctl
  changed_when: false
  register: hostctl_installed
  failed_when: "not ('hostctl: not found' in hostctl_installed.stderr or 'hostctl is' in hostctl_installed.stdout)"

- name: Get installed version data
  ansible.builtin.command:
    cmd: hostctl --version
  changed_when: false
  register: hostctl_installed_version_data
  failed_when: "'hostctl' not in hostctl_installed_version_data.stdout"
  when: hostctl_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    hostctl_installed_version: "{{ 'v' + hostctl_installed_version_data.stdout.split()[2] if hostctl_installed.rc == 0 else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/guumaster/hostctl/releases/latest
    return_content: true
  register: hostctl_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    hostctl_release_version: "{{ hostctl_latest_release_data.json.tag_name if hostctl_version == 'latest' else hostctl_version }}"

- name: Download and install
  when: hostctl_installed_version != hostctl_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: 64-bit
          arm: arm64
      ansible.builtin.set_fact:
        hostctl_release_artifact: "hostctl_{{ hostctl_release_version[1:] }}_{{ ansible_facts.system | lower }}_{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: hostctl_
      register: hostctl_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/guumaster/hostctl/releases/download/{{ hostctl_release_version }}/{{ hostctl_release_artifact }}.tar.gz"
        dest: "{{ hostctl_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ hostctl_tempdir.path }}/hostctl"
        dest: /usr/local/bin
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ hostctl_tempdir.path }}"
        state: absent
