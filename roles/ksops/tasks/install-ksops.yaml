---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: type ksops
  changed_when: false
  register: ksops_installed
  failed_when: "not ('ksops: not found' in ksops_installed.stderr or 'ksops is' in ksops_installed.stdout)"

# - name: Get installed version data
  become: true
  become_user: "{{ username }}"
#   ansible.builtin.command:
#     cmd: ksops --version
#   changed_when: false
#   register: ksops_installed_version_data
#   failed_when: "'ksops' not in ksops_installed_version_data.stdout"
#   when: ksops_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    ksops_installed_version: "" # ksops does not expose version lol

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/viaduct-ai/kustomize-sops/releases/latest
    return_content: true
  register: ksops_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    ksops_release_version: "{{ ksops_latest_release_data.json.tag_name if ksops_version == 'latest' else ksops_version }}"

- name: Download and install
  # when: ksops_installed_version != ksops_release_version
  when: true # ksops does not expose version lol
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: arm64
      ansible.builtin.set_fact:
        ksops_release_artifact: "ksops_{{ ksops_release_version[1:] }}_{{ ansible_facts.system }}_{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: ksops_
      register: ksops_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/viaduct-ai/kustomize-sops/releases/download/{{ ksops_release_version }}/{{ ksops_release_artifact }}.tar.gz"
        dest: "{{ ksops_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ ksops_tempdir.path }}/ksops"
        dest: "{{ ksops_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ ksops_tempdir.path }}"
        state: absent
