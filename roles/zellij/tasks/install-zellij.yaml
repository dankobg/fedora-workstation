---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ zellij_binary_name }}"
  register: zellij_installed
  changed_when: false
  failed_when: zellij_installed.rc != 0 and zellij_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ zellij_binary_name }} --version"
  register: zellij_installed_version_data
  changed_when: false
  failed_when: "zellij_installed_version_data.rc != 0 or (zellij_installed_version_data.rc == 0 and 'zellij' not in zellij_installed_version_data.stdout)"
  when: zellij_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    zellij_installed_version: "{{ 'v' + zellij_installed_version_data.stdout.split()[1] if zellij_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ zellij_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: zellij_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    zellij_release_version: "{{ zellij_latest_release_data.json.tag_name if zellij_version == 'latest' else zellij_version }}"

- name: Download and install
  when: zellij_force_download or zellij_installed_version != zellij_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: zellij_
      register: zellij_tempdir

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: zellij_
      register: zellij_tempdir

    - name: Download checksums
      ansible.builtin.get_url:
        url: "{{ zellij_checksum_url }}"
        dest: "{{ zellij_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
      register: downloaded_checksums

    - name: Get checksum text content
      ansible.builtin.slurp:
        src: "{{ downloaded_checksums.dest }}"
      register: checksums_data

    - name: Extract checksum
      ansible.builtin.set_fact:
        zellij_checksum: "{{ zellij_checksum_algorithm }}:{{ checksums_data.content | b64decode | trim | split | first }}"

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ zellij_artifact_download_url }}"
        dest: "{{ zellij_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
      register: downloaded_artifact

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ downloaded_artifact.dest }}"
        dest: "{{ zellij_tempdir.path }}"
        remote_src: true

    - name: Get binary info
      ansible.builtin.stat:
        path: "{{ zellij_tempdir.path }}/zellij"
        checksum_algorithm: "{{ zellij_checksum_algorithm }}"
      register: binary_info

    - name: Verify checksum
      ansible.builtin.assert:
        that: "{{ binary_info.stat.checksum == zellij_checksum[(zellij_checksum_algorithm | length) + 1 :] }}"

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ zellij_tempdir.path }}/zellij"
        dest: "{{ zellij_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ zellij_tempdir.path }}"
        state: absent
