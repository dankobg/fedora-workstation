---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ onefetch_binary_name }}"
  register: onefetch_installed
  changed_when: false
  failed_when: onefetch_installed.rc != 0 and onefetch_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ onefetch_binary_name }} --version"
  register: onefetch_installed_version_data
  changed_when: false
  failed_when: >
    onefetch_installed_version_data.rc != 0 or (onefetch_installed_version_data.rc == 0 and 'onefetch' not in onefetch_installed_version_data.stdout)
  when: onefetch_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    onefetch_installed_version: "{{ onefetch_installed_version_data.stdout.split()[1] if onefetch_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ onefetch_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: onefetch_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    onefetch_release_version: "{{ onefetch_latest_release_data.json.tag_name if onefetch_version == 'latest' else onefetch_version }}"

- name: Download and install
  when: onefetch_force_download or onefetch_installed_version != onefetch_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: onefetch_
      register: onefetch_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ onefetch_artifact_download_url }}"
        dest: "{{ onefetch_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ onefetch_tempdir.path }}/onefetch"
        dest: "{{ onefetch_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ onefetch_tempdir.path }}"
        state: absent
