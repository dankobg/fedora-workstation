---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ devspace_binary_name }}"
  register: devspace_installed
  changed_when: false
  failed_when: devspace_installed.rc != 0 and devspace_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ devspace_binary_name }} --version"
  register: devspace_installed_version_data
  changed_when: false
  failed_when: >
    devspace_installed_version_data.rc != 0 or (devspace_installed_version_data.rc == 0 and 'devspace version' not in devspace_installed_version_data.stdout)
  when: devspace_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    devspace_installed_version: "{{ 'v' + devspace_installed_version_data.stdout.split()[2] if devspace_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ devspace_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: devspace_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    devspace_release_version: "{{ devspace_latest_release_data.json.tag_name if devspace_version == 'latest' else devspace_version }}"

- name: Download and install
  when: devspace_force_download or devspace_installed_version != devspace_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: devspace_
      register: devspace_tempdir

    - name: Download checksum
      ansible.builtin.get_url:
        url: "{{ devspace_checksum_url }}"
        dest: "{{ devspace_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
      register: downloaded_checksum

    - name: Set formatted checksum
      ansible.builtin.slurp:
        src: "{{ downloaded_checksum.dest }}"
      register: checksum_data

    - name: Format checksum
      ansible.builtin.set_fact:
        devspace_checksum: "{{ devspace_checksum_algorithm }}:{{ checksum_data.content | b64decode | trim | split | first }}"

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ devspace_artifact_download_url }}"
        dest: "{{ devspace_tempdir.path }}"
        checksum: "{{ devspace_checksum }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ devspace_tempdir.path }}/{{ devspace_artifact_name }}"
        dest: "{{ devspace_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ devspace_tempdir.path }}"
        state: absent
