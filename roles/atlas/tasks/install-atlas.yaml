---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ atlas_binary_name }}"
  register: atlas_installed
  changed_when: false
  failed_when: atlas_installed.rc != 0 and atlas_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ atlas_binary_name }} version"
  register: atlas_installed_version_data
  changed_when: false
  failed_when: "atlas_installed_version_data.rc != 0 or (atlas_installed_version_data.rc == 0 and 'atlas version' not in atlas_installed_version_data.stdout)"
  when: atlas_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    atlas_installed_version: "{{ atlas_installed_version_data.stdout_lines[0].split()[2] if atlas_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ atlas_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: atlas_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    atlas_release_version: "{{ atlas_latest_release_data.json.tag_name if atlas_version == 'latest' else atlas_version }}"

- name: Download and install
  when: atlas_force_download or atlas_installed_version != atlas_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: atlas_
      register: atlas_tempdir

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ atlas_artifact_download_url }}"
        dest: "{{ atlas_tempdir.path }}"
        checksum: "{{ atlas_checksum }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ atlas_tempdir.path }}/{{ atlas_artifact_basename }}"
        dest: "{{ atlas_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ atlas_tempdir.path }}"
        state: absent
