---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ helix_binary_name }}"
  register: helix_installed
  changed_when: false
  failed_when: helix_installed.rc != 0 and helix_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ helix_binary_name }} --version"
  register: helix_installed_version_data
  changed_when: false
  failed_when: "helix_installed_version_data.rc != 0 or (helix_installed_version_data.rc == 0 and 'helix' not in helix_installed_version_data.stdout)"
  when: helix_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    helix_installed_version: "{{ helix_installed_version_data.stdout.split()[1] if helix_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ helix_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: helix_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    helix_release_version: "{{ helix_latest_release_data.json.tag_name if helix_version == 'latest' else helix_version }}"

- name: Temp fix for version missmatch
  block:
    - name: Temp fix 1
      ansible.builtin.set_fact:
        parts: "{{ helix_installed_version.split('.') if helix_installed.rc == 0 else [] }}"

    - name: Temp fix 2
      ansible.builtin.set_fact:
        helix_installed_version: "{{ parts[0] + '.0' + parts[1] if (parts | length == 2) else '' }}"

- name: Download and install
  when: helix_force_download or helix_installed_version != helix_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: helix_
      register: helix_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ helix_artifact_download_url }}"
        dest: "{{ helix_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ helix_tempdir.path }}/{{ helix_artifact_basename }}/hx"
        dest: "{{ helix_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Copy runtime
      ansible.builtin.copy:
        src: "{{ helix_tempdir.path }}/{{ helix_artifact_basename }}/runtime"
        dest: "/home/{{ username }}/.config/helix"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ helix_tempdir.path }}"
        state: absent

- name: Configure helix
  block:
    - name: Copy config
      ansible.builtin.template:
        src: config.toml.j2
        dest: "/home/{{ username }}/.config/helix/config.toml"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"

    - name: Copy languages file
      ansible.builtin.template:
        src: languages.toml.j2
        dest: "/home/{{ username }}/.config/helix/languages.toml"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
