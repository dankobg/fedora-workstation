---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ tlrc_binary_name }}"
  register: tlrc_installed
  changed_when: false
  failed_when: tlrc_installed.rc != 0 and tlrc_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ tlrc_binary_name }} --version"
  register: tlrc_installed_version_data
  changed_when: false
  failed_when: "tlrc_installed_version_data.rc != 0 or (tlrc_installed_version_data.rc == 0 and 'tlrc' not in tlrc_installed_version_data.stdout)"
  when: tlrc_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    tlrc_installed_version: "{{ tlrc_installed_version_data.stdout.split()[1] if tlrc_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ tlrc_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: tlrc_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    tlrc_release_version: "{{ tlrc_latest_release_data.json.tag_name if tlrc_version == 'latest' else tlrc_version }}"

- name: Download and install
  when: tlrc_force_download or tlrc_installed_version != tlrc_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: tlrc_
      register: tlrc_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ tlrc_artifact_download_url }}"
        dest: "{{ tlrc_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ tlrc_tempdir.path }}/tldr"
        dest: "{{ tlrc_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ tlrc_tempdir.path }}"
        state: absent
