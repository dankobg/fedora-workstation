---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ xh_binary_name }}"
  register: xh_installed
  changed_when: false
  failed_when: xh_installed.rc != 0 and xh_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ xh_binary_name }} --version"
  register: xh_installed_version_data
  changed_when: false
  failed_when: "xh_installed_version_data.rc != 0 or (xh_installed_version_data.rc == 0 and 'xh' not in xh_installed_version_data.stdout)"
  when: xh_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    xh_installed_version: "{{ 'v' + xh_installed_version_data.stdout_lines[0].split()[1] if xh_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/ducaale/xh/releases/latest
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: xh_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    xh_release_version: "{{ xh_latest_release_data.json.tag_name if xh_version == 'latest' else xh_version }}"

- name: Download and install
  when: xh_installed_version != xh_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: arm64
      ansible.builtin.set_fact:
        xh_release_artifact: "xh-{{ xh_release_version }}-{{ arch }}-unknown-{{ ansible_facts.system | lower }}-musl"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: xh_
      register: xh_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/ducaale/xh/releases/download/{{ xh_release_version }}/{{ xh_release_artifact }}.tar.gz"
        dest: "{{ xh_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ xh_tempdir.path }}/{{ xh_release_artifact }}/xh"
        dest: "{{ xh_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ xh_tempdir.path }}"
        state: absent
