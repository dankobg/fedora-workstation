---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ sops_binary_name }}"
  changed_when: false
  register: sops_installed
  failed_when: sops_installed.rc != 0 and sops_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ sops_binary_name }} --version"
  register: sops_installed_version_data
  changed_when: false
  failed_when: "sops_installed_version_data.rc != 0 or (sops_installed_version_data.rc == 0 and 'sops' not in sops_installed_version_data.stdout)"
  when: not sops_installed.failed

- name: Set installed version
  ansible.builtin.set_fact:
    sops_installed_version: "{{ 'v' + sops_installed_version_data.stdout.split()[1] if not sops_installed_version_data.failed else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/getsops/sops/releases/latest
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: sops_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    sops_release_version: "{{ sops_latest_release_data.json.tag_name if sops_version == 'latest' else sops_version }}"

- name: Download and install
  when: sops_installed_version != sops_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: amd64
          arm: arm64
      ansible.builtin.set_fact:
        sops_release_artifact: "sops-{{ sops_release_version }}.{{ ansible_facts.system | lower }}.{{ arch }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: sops_
      register: sops_tempdir

    - name: Download artifact
      ansible.builtin.get_url:
        url: "https://github.com/getsops/sops/releases/download/{{ sops_release_version }}/{{ sops_release_artifact }}"
        dest: "{{ sops_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ sops_tempdir.path }}/{{ sops_release_artifact }}"
        dest: "{{ sops_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ sops_tempdir.path }}"
        state: absent
