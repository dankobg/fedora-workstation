---
# tasks file for kitty

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/kovidgoyal/kitty/releases/latest
    return_content: true
  register: kitty_latest_release_data

- name: Set the latest release version
  ansible.builtin.set_fact:
    kitty_latest_release_version: "{{ kitty_latest_release_data.json.tag_name }}"

- name: Set the release artifact
  vars:
    arch_name:
      amd: x86_64
      arm: arm64
  ansible.builtin.set_fact:
    kitty_release_artifact: "kitty-{{ kitty_latest_release_version[1:] }}-{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

- name: Create download temporary directory
  ansible.builtin.tempfile:
    state: directory
    prefix: kitty_
  register: kitty_tempdir

- name: Unarchive artifact
  ansible.builtin.unarchive:
    src: "https://github.com/kovidgoyal/kitty/releases/download/{{ kitty_latest_release_version }}/{{ kitty_release_artifact }}.txz"
    dest: "{{ kitty_tempdir.path }}"
    remote_src: true

- name: Copy binary
  ansible.builtin.copy:
    src: "{{ kitty_tempdir.path }}/bin/{{ item }}"
    dest: /usr/local/bin
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: a+x
    remote_src: true
  loop:
    - kitty
    - kitten

- name: Copy terminfo
  ansible.builtin.copy:
    src: "{{ kitty_tempdir.path }}/share/terminfo"
    dest: /usr/local/share
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
    remote_src: true

- name: Copy kitty-extensions
  ansible.builtin.copy:
    src: "{{ kitty_tempdir.path }}/lib/{{ item }}"
    dest: /usr/local/lib
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
    remote_src: true
  loop:
    - kitty
    - kitty-extensions

- name: Copy dekstop files
  ansible.builtin.copy:
    src: "{{ kitty_tempdir.path }}/share/applications/{{ item }}"
    dest: /usr/local/share/applications
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
    remote_src: true
  loop:
    - "kitty.desktop"
    - "kitty-open.desktop"

- name: Ensure config directory exists
  ansible.builtin.file:
    path: "/home/{{ username }}/.config/kitty"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  register: config_dir

- name: Copy config
  ansible.builtin.copy:
    src: kitty.conf
    dest: "{{ config_dir.path }}"
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  loop:
    - "kitty-dark.png"
    - "kitty-light.png"
  when: kitty_icon is defined

- name: Ensure icons directory exists
  ansible.builtin.file:
    path: /usr/local/share/icons/kitty
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  when: kitty_icon is defined

- name: Copy custom icons
  ansible.builtin.copy:
    src: "icons/{{ item }}"
    dest: /usr/local/share/icons/kitty
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0644"
  loop:
    - "kitty-dark.png"
    - "kitty-light.png"
  when: kitty_icon is defined

- name: Use the custom desktop icon
  ansible.builtin.lineinfile:
    path: /usr/local/share/applications/kitty.desktop
    regexp: "^Icon="
    line: "Icon=/usr/local/share/icons/kitty/kitty-{{ kitty_icon }}.png"
    state: present
  when: kitty_icon is defined

- name: Cleanup temp files
  ansible.builtin.file:
    path: "{{ kitty_tempdir.path }}"
    state: absent
