---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ kitty_binary_name }}"
  register: kitty_installed
  changed_when: false
  failed_when: kitty_installed.rc != 0 and kitty_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ kitty_binary_name }} --version"
  register: kitty_installed_version_data
  changed_when: false
  failed_when: "kitty_installed_version_data.rc != 0 or (kitty_installed_version_data.rc == 0 and 'kitty' not in kitty_installed_version_data.stdout)"
  when: kitty_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    kitty_installed_version: "{{ 'v' + kitty_installed_version_data.stdout.split()[1] if kitty_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ kitty_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: kitty_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    kitty_release_version: "{{ kitty_latest_release_data.json.tag_name if kitty_version == 'latest' else kitty_version }}"

- name: Download and install
  when: kitty_force_download or kitty_installed_version != kitty_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: kitty_
      register: kitty_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ kitty_artifact_download_url }}"
        dest: "{{ kitty_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ kitty_tempdir.path }}/bin/{{ item.name }}"
        dest: "{{ item.dest }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true
      loop:
        - name: "{{ kitty_binary_name }}"
          dest: "{{ kitty_binary_path }}"
        - name: "{{ kitty_kitten_binary_name }}"
          dest: "{{ kitty_kitten_binary_path }}"

    - name: Copy terminfo
      ansible.builtin.copy:
        src: "{{ kitty_tempdir.path }}/share/terminfo"
        dest: /usr/local/share
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true

    - name: Copy kitty-extensions
      ansible.builtin.copy:
        src: "{{ kitty_tempdir.path }}/lib/{{ item }}"
        dest: /usr/local/lib
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true
      loop:
        - kitty
        - kitty-extensions

    - name: Copy dekstop files
      ansible.builtin.copy:
        src: "{{ kitty_tempdir.path }}/share/applications/{{ item }}"
        dest: /usr/local/share/applications
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
        remote_src: true
      loop:
        - "kitty.desktop"
        - "kitty-open.desktop"

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ kitty_tempdir.path }}"
        state: absent

- name: Configure kitty
  block:
    - name: Ensure config directory exists
      ansible.builtin.file:
        path: "/home/{{ username }}/.config/kitty"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
      register: config_dir

    - name: Copy config
      ansible.builtin.template:
        src: kitty.conf.j2
        dest: "{{ config_dir.path }}/kitty.conf"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"

    - name: Copy theme
      ansible.builtin.template:
        src: current-theme.conf.j2
        dest: "{{ config_dir.path }}/current-theme.conf"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"

    - name: Ensure icons directory exists
      ansible.builtin.file:
        path: /usr/local/share/icons/kitty
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
      register: icons_dir
      when: kitty_icon is defined

    - name: Copy custom icons
      ansible.builtin.copy:
        src: "icons/{{ item }}"
        dest: "{{ icons_dir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
      loop:
        - "kitty-dark.png"
        - "kitty-light.png"
      when: kitty_icon is defined

    - name: Use the custom desktop icon
      ansible.builtin.lineinfile:
        path: /usr/local/share/applications/kitty.desktop
        regexp: "^Icon="
        line: "Icon={{ icons_dir.path }}/kitty-{{ kitty_icon }}.png"
        state: present
      when: kitty_icon is defined
