---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ mkcert_binary_name }}"
  changed_when: false
  register: mkcert_installed
  failed_when: mkcert_installed.rc != 0 and mkcert_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ mkcert_binary_name }} --version"
  register: mkcert_installed_version_data
  changed_when: false
  failed_when: >
    mkcert_installed_version_data.rc != 0 or not (mkcert_installed_version_data.stdout | regex_search('^v\d+\.\d+\.\d+$'))
  when: not mkcert_installed.failed

- name: Set installed version
  ansible.builtin.set_fact:
    mkcert_installed_version: "{{ mkcert_installed_version_data.stdout if not mkcert_installed_version_data.failed else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/FiloSottile/mkcert/releases/latest
    return_content: true
  register: mkcert_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    mkcert_release_version: "{{ mkcert_latest_release_data.json.tag_name if mkcert_version == 'latest' else mkcert_version }}"

- name: Download and install
  when: mkcert_installed_version != mkcert_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: amd64
          arm: arm64
      ansible.builtin.set_fact:
        mkcert_release_artifact: "mkcert-{{ mkcert_release_version }}-{{ ansible_facts.system | lower }}-{{ arch }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: mkcert_
      register: mkcert_tempdir

    - name: Download artifact
      ansible.builtin.get_url:
        url: "https://github.com/FiloSottile/mkcert/releases/download/{{ mkcert_release_version }}/mkcert-v1.4.4-linux-amd64"
        dest: "{{ mkcert_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ mkcert_tempdir.path }}/{{ mkcert_release_artifact }}"
        dest: "{{ mkcert_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ mkcert_tempdir.path }}"
        state: absent
