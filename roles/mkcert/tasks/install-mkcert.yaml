---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ mkcert_binary_name }}"
  register: mkcert_installed
  changed_when: false
  failed_when: mkcert_installed.rc != 0 and mkcert_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ mkcert_binary_name }} --version"
  register: mkcert_installed_version_data
  changed_when: false
  failed_when: >
    mkcert_installed_version_data.rc != 0 or not (mkcert_installed_version_data.stdout | regex_search('^v\d+\.\d+\.\d+$'))
  when: mkcert_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    mkcert_installed_version: "{{ mkcert_installed_version_data.stdout if mkcert_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ mkcert_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: mkcert_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    mkcert_release_version: "{{ mkcert_latest_release_data.json.tag_name if mkcert_version == 'latest' else mkcert_version }}"

- name: Download and install
  when: mkcert_force_download or mkcert_installed_version != mkcert_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: mkcert_
      register: mkcert_tempdir

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ mkcert_artifact_download_url }}"
        dest: "{{ mkcert_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ mkcert_tempdir.path }}/{{ mkcert_artifact_name }}"
        dest: "{{ mkcert_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ mkcert_tempdir.path }}"
        state: absent
