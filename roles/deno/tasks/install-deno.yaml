---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "command -v {{ deno_binary_name }}"
  register: deno_installed
  changed_when: false
  failed_when: deno_installed.rc != 0 and deno_installed.stderr != ""

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: "{{ deno_binary_name }} --version"
  register: deno_installed_version_data
  changed_when: false
  failed_when: "deno_installed_version_data.rc != 0 or (deno_installed_version_data.rc == 0 and 'deno' not in deno_installed_version_data.stdout)"
  when: deno_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    deno_installed_version: "{{ 'v' + deno_installed_version_data.stdout_lines[0].split()[1] if deno_installed.rc == 0 else '' }}"

- name: Get the latest release data
  ansible.builtin.uri:
    url: "{{ deno_latest_version_url }}"
    return_content: true
    headers:
      Authorization: "{{ 'Bearer ' + github_pat if github_pat is defined else omit }}"
  register: deno_latest_release_data
  retries: 3
  delay: 5

- name: Set the release version
  ansible.builtin.set_fact:
    deno_release_version: "{{ deno_latest_release_data.json.tag_name if deno_version == 'latest' else deno_version }}"

- name: Download and install
  when: deno_force_download or deno_installed_version != deno_release_version
  block:
    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: deno_
      register: deno_tempdir

    - name: Download checksum
      ansible.builtin.get_url:
        url: "{{ deno_checksum_url }}"
        dest: "{{ deno_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
      register: downloaded_checksum

    - name: Set formatted checksum
      ansible.builtin.slurp:
        src: "{{ downloaded_checksum.dest }}"
      register: checksum_data

    - name: Format checksum
      ansible.builtin.set_fact:
        deno_checksum: "{{ deno_checksum_algorithm }}:{{ checksum_data.content | b64decode | trim | split | first }}"

    - name: Download artifact
      ansible.builtin.get_url:
        url: "{{ deno_artifact_download_url }}"
        dest: "{{ deno_tempdir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
      register: downloaded_artifact

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "{{ downloaded_artifact.dest }}"
        dest: "{{ deno_tempdir.path }}"
        remote_src: true

    - name: Get binary info
      ansible.builtin.stat:
        path: "{{ deno_tempdir.path }}/deno"
        checksum_algorithm: "{{ deno_checksum_algorithm }}"
      register: binary_info

    - name: Verify checksum
      ansible.builtin.assert:
        that: "{{ binary_info.stat.checksum == deno_checksum[(deno_checksum_algorithm | length) + 1 :] }}"

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ deno_tempdir.path }}/deno"
        dest: "{{ deno_binary_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ deno_tempdir.path }}"
        state: absent
