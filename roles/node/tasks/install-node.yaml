---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: type node
  changed_when: false
  register: node_installed
  failed_when: "not ('node: not found' in node_installed.stderr or 'node is' in node_installed.stdout)"

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: node --version
  changed_when: false
  register: node_installed_version_data
  failed_when: >
    not (node_installed_version_data.stdout | regex_search('^v\d+\.\d+\.\d+$'))
  when: node_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    node_installed_version: "{{ node_installed_version_data.stdout if node_installed.rc == 0 else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/nodejs/node/releases/latest
    return_content: true
  register: node_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    node_release_version: "{{ node_latest_release_data.json.tag_name if node_version == 'latest' else node_version }}"

- name: Download and install
  when: node_installed_version != node_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x64
          arm: arm64
      ansible.builtin.set_fact:
        node_release_artifact: node-{{ node_release_version }}-{{ ansible_facts.system | lower }}-{{ arch }}

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: node_
      register: node_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://nodejs.org/dist/{{ node_release_version }}/{{ node_release_artifact }}.tar.xz"
        dest: "{{ node_tempdir.path }}"
        remote_src: true

    - name: Copy lib
      ansible.builtin.copy:
        src: "{{ node_tempdir.path }}/{{ node_release_artifact }}/lib/node_modules"
        dest: /usr/local/lib
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true

    - name: Copy binaries
      ansible.builtin.copy:
        src: "{{ node_tempdir.path }}/{{ node_release_artifact }}/bin/node"
        dest: "{{ node_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true
        follow: true

    - name: Symlink other binaries
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        state: link
      loop:
        - src: "/usr/local/lib/node_modules/corepack/dist/corepack.js"
          dest: "{{ node_corepack_path }}"
        - src: "/usr/local/lib/node_modules/npm/bin/npm-cli.js"
          dest: "{{ node_npm_path }}"
        - src: "/usr/local/lib/node_modules/npm/bin/npx-cli.js"
          dest: "{{ node_npx_path }}"

    - name: Copy include
      ansible.builtin.copy:
        src: "{{ node_tempdir.path }}/{{ node_release_artifact }}/include/node"
        dest: /usr/local/include
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true

    - name: Ensure doc directory exists
      ansible.builtin.file:
        path: /usr/local/share/doc
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
      register: doc_dir

    - name: Copy doc
      ansible.builtin.copy:
        src: "{{ node_tempdir.path }}/{{ node_release_artifact }}/share/doc/node"
        dest: "{{ doc_dir.path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"
        remote_src: true

    - name: Copy man
      ansible.builtin.copy:
        src: "{{ node_tempdir.path }}/{{ node_release_artifact }}/share/man/man1/node.1"
        dest: /usr/local/share/man/man1
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"
        remote_src: true

    - name: Create NPM global directory
      ansible.builtin.file:
        path: "{{ node_npm_global_dir }}"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0755"

    - name: Copy global npmrc
      ansible.builtin.template:
        src: npmrc.j2
        dest: /etc/npmrc
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: "0644"

    - name: Install global packages
      become: true
      become_user: "{{ username }}"
      community.general.npm:
        name: "{{ item.name | default(item) }}"
        version: "{{ item.version | default(omit) }}"
        global: true
        state: "{{ item.state | default('present') }}"
      environment:
        NPM_CONFIG_PREFIX: "{{ node_npm_global_dir }}"
      loop: "{{ node_global_packages }}"

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ node_tempdir.path }}"
        state: absent
