---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: type kubens
  changed_when: false
  register: kubens_installed
  failed_when: "not ('kubens: not found' in kubens_installed.stderr or 'kubens is' in kubens_installed.stdout)"

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: kubens --version
  changed_when: false
  register: kubens_installed_version_data
  failed_when: >
    not (kubens_installed_version_data.stdout | regex_search('^\d+\.\d+\.\d+$'))
  when: kubens_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    kubens_installed_version: "{{ 'v' + kubens_installed_version_data.stdout if kubens_installed.rc == 0 else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/ahmetb/kubectx/releases/latest
    return_content: true
  register: kubens_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    kubens_release_version: "{{ kubens_latest_release_data.json.tag_name if kubens_version == 'latest' else kubens_version }}"

- name: Download and install
  when: kubens_installed_version != kubens_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: arm64
      ansible.builtin.set_fact:
        kubens_release_artifact: "kubens_{{ kubens_latest_release_version }}_{{ ansible_facts.system | lower }}_{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: kubens_
      register: kubens_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/ahmetb/kubectx/releases/download/{{ kubens_latest_release_version }}/{{ kubens_release_artifact }}.tar.gz"
        dest: "{{ kubens_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ kubens_tempdir.path }}/kubens"
        dest: "{{ kubens_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ kubens_tempdir.path }}"
        state: absent
