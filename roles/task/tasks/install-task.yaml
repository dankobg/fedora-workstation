---
- name: Check if installed
  ansible.builtin.command:
    cmd: type task
  changed_when: false
  register: task_installed
  failed_when: "not ('task: not found' in task_installed.stderr or 'task is' in task_installed.stdout)"

- name: Get installed version data
  ansible.builtin.command:
    cmd: task --version
  changed_when: false
  register: task_installed_version_data
  failed_when: "'version' not in task_installed_version_data.stdout"
  when: task_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    task_installed_version: "{{ task_installed_version_data.stdout.split()[2] if task_installed.rc == 0 else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/go-task/task/releases/latest
    return_content: true
  register: task_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    task_release_version: "{{ task_latest_release_data.json.tag_name if task_version == 'latest' else task_version }}"

- name: Download and install
  when: task_installed_version != task_release_version
  block:
    - name: Set the release artifact
      vars:
        arch_name:
          amd: amd64
          arm: arm64
      ansible.builtin.set_fact:
        task_release_artifact: "task_{{ ansible_facts.system | lower }}_{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: task_
      register: task_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/go-task/task/releases/download/{{ task_release_version }}/{{ task_release_artifact }}.tar.gz"
        dest: "{{ task_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ task_tempdir.path }}/task"
        dest: "{{ task_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ task_tempdir.path }}"
        state: absent
