---
- name: Check if installed
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: type goreleaser
  changed_when: false
  register: goreleaser_installed
  failed_when: "not ('goreleaser: not found' in goreleaser_installed.stderr or 'goreleaser is' in goreleaser_installed.stdout)"

- name: Get installed version data
  become: true
  become_user: "{{ username }}"
  ansible.builtin.command:
    cmd: goreleaser --version
  changed_when: false
  register: goreleaser_installed_version_data
  failed_when: "'goreleaser' not in goreleaser_installed_version_data.stdout"
  when: goreleaser_installed.rc == 0

- name: Set installed version
  ansible.builtin.set_fact:
    goreleaser_installed_version: "{{ 'v' + goreleaser_installed_version_data.stdout_lines[8].split(':')[1].strip() if goreleaser_installed.rc == 0 else '' }}"

- name: Get the latest GitHub release data
  ansible.builtin.uri:
    url: https://api.github.com/repos/goreleaser/goreleaser/releases/latest
    return_content: true
  register: goreleaser_latest_release_data

- name: Set the release version
  ansible.builtin.set_fact:
    goreleaser_release_version: "{{ goreleaser_latest_release_data.json.tag_name if goreleaser_version == 'latest' else goreleaser_version }}"

- name: Download and install
  when: goreleaser_installed_version != goreleaser_release_version
  block:
    - name: Goreleaser | Set the latest release version
      ansible.builtin.set_fact:
        goreleaser_release_version: "{{ goreleaser_latest_release_data.json.tag_name }}"

    - name: Set the release artifact
      vars:
        arch_name:
          amd: x86_64
          arm: arm64
      ansible.builtin.set_fact:
        goreleaser_release_artifact: "goreleaser_{{ ansible_facts.system }}_{{ arch_name[archs.get(ansible_facts.architecture)] | default(ansible_facts.architecture) }}"

    - name: Create download temporary directory
      ansible.builtin.tempfile:
        state: directory
        prefix: goreleaser_
      register: goreleaser_tempdir

    - name: Unarchive artifact
      ansible.builtin.unarchive:
        src: "https://github.com/goreleaser/goreleaser/releases/download/{{ goreleaser_release_version }}/{{ goreleaser_release_artifact }}.tar.gz"
        dest: "{{ goreleaser_tempdir.path }}"
        remote_src: true

    - name: Copy binary
      ansible.builtin.copy:
        src: "{{ goreleaser_tempdir.path }}/goreleaser"
        dest: "{{ goreleaser_path }}"
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: a+x
        remote_src: true

    - name: Cleanup temp files
      ansible.builtin.file:
        path: "{{ goreleaser_tempdir.path }}"
        state: absent
